pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- game ribbyte
-- by james glass

local gravity
local friction
local game_frame

local player
local player_fx

-- pico-8 functions --

-- on cart start
function _init()
	-- clear screen
	cls()

	gravity = 0.1
	friction = 0.8

	game_frame = 0
	
	player = {
		-- sprite data
		sprite = 1,
		frame = 0,
		w = 8,
		h = 8,
		walking_sprites = {1, 23, 24},
		walking_sprite_ptr = 1,
		-- position
		pos_x = 72,
		pos_y = 8,
		-- change in position
		dx = 0,
		dy = 0,
		-- speed and acceleration
		max_speed = 1,
		max_air_speed = 3,
		acceleration = 0.4,
		air_acceleration = 0.9,
		slide_friction = 0.95,
		jump_boost = 2.5,
		-- states
		flip = false,
		is_jumping = false,
		is_falling = false,
		is_crouching = false,
		is_walking = false,
		is_ledge_falling = false,
		is_grounded = true,
		is_walking_into_wall = false,
		is_dead = false,
		is_dead_fall = false,
		-- is_licky = false,
		----
		update = function(self)
			---- update frame
			self.frame = iterate_frames(self.frame)
			---- constants
			self.apply_constants(self)

			if not self.is_dead then
			---- inputs
				self.handle_inputs(self)
			else
				self.is_dead_fall = self.dy <= 0

				self.pos_y += self.dy
			end
			
			---- move speed cap
			self.apply_speed_cap(self)
			---- debug
			self.log_states(self)
		end,
		draw = function(self)
			self.animate(self)
			spr(self.sprite, self.pos_x, self.pos_y, 1, 1, self.flip) 
		end,
		log_states = function(self)
			print(self.dx)
			print(self.dy)

			print(self.is_dead)
		end,
		handle_inputs = function(self)
			-- left or right
			if not self.is_crouching then
				-- left
				if btn(0) then
					self.dx -= self.acceleration
					self.flip = true
				end

				-- right
				if btn(1) then
					self.dx += self.acceleration
					self.flip = false
				end

				if btn(0) and btn(1) then
					self.dx = 0
				end
			end

			-- ground movement states
			self.is_walking = (btn(0) or btn(1)) and self.dx != 0
			self.is_walking_into_wall = (btn(0) or btn(1)) and not (btn(0) and btn(1)) and not self.walking

			-- jump (up) press; check to see if can jump
			if (jump_btnp() and not self.is_jumping and not self.is_falling and not self.is_ledge_falling) then
				self.dy -= self.air_acceleration * self.jump_boost
				self.is_jumping = true

				-- create land jump sprite
				create_jump_fx({25, 26, 27}, self.pos_x, self.pos_y, self.flip)

			elseif (jump_btnp() and self.is_ledge_falling) then
				self.dy = - (self.air_acceleration * self.jump_boost)
				self.is_jumping = true
				self.is_ledge_falling = false

				-- create air jump sprite
				create_jump_fx({28, 29, 30}, self.pos_x, self.pos_y, self.flip)
			end

			-- air movement states
			if self.dy > 0 and self.is_jumping then
				self.is_jumping = false
				self.is_falling = true
			elseif self.dy >= 0.5 and not self.is_falling and not self.is_jumping then
				self.is_ledge_falling = true
			end

			-- down
			self.is_crouching = (btn(3) and not self.is_jumping and not self.is_falling)

			if self.is_walking and not self.is_jumping and not self.is_falling and not self.is_ledge_falling then
				create_jump_fx({11, 12, 13}, self.pos_x, self.pos_y, self.flip)
			end

			self.check_collisions(self)
		end,
		check_collisions = function(self)
			-- check spikes
			if check_spikes(self.pos_x + self.dx, self.pos_y + self.dy) then
				self.dx = 0
				self.dy = - (self.air_acceleration * self.jump_boost)
				
				self.is_dead = true
			end

			-- check for wall
			if not check_wall(self.pos_x + self.dx, self.pos_y) then
				self.pos_x += self.dx
			else
				self.dx = 0
			end 

			-- check for floor
			if not check_wall(self.pos_x, self.pos_y + self.dy) then
				self.pos_y += self.dy
				self.is_grounded = false
			else
				self.dy = 0
				self.is_grounded = true
				self.is_falling = false
				self.is_ledge_falling = false
			end
		end,
		animate = function(self)
			-- dead
			if self.is_dead then
				if self.is_dead_fall then
					self.sprite = 14
				else 
					self.sprite = 15
				end
				
				return
			end
			
			-- ground movement
			if self.is_grounded and not self.is_walking and not self.is_walking_into_wall then
				if self.frame > 29 then
					self.sprite = 2
				else
					self.sprite = 1
				end
			elseif self.is_walking then
				if self.frame % 3 == 0 then
					self.sprite = self.walking_sprites[self.walking_sprite_ptr]
					if self.walking_sprite_ptr < #self.walking_sprites then
						self.walking_sprite_ptr += 1
					else
						self.walking_sprite_ptr = 1
					end
				end
			elseif self.is_walking_into_wall then
				if self.frame > 49 then
					self.sprite = 20
				elseif self.frame > 29 then
					self.sprite = 21
				else
					self.sprite = 22
				end
			end

			-- jumping and falling
			if self.is_jumping then
				self.sprite = 3
			elseif self.is_falling then
				self.sprite = 4
			elseif self.is_ledge_falling then
				self.sprite = 5
			end

			--crouching
			if self.is_crouching then 
				self.sprite = 6
			end
		end,
		apply_constants = function(self)
			if not self.is_crouching then
				self.dx *= friction
			else
				self.dx *= self.slide_friction
			end

			self.dy += gravity
		end,
		apply_speed_cap = function(self)
			self.dx = mid(-self.max_speed, self.dx, self.max_speed)
			self.dy = mid(-self.max_air_speed, self.dy, self.max_air_speed)
		end
	}

	player_fx = {}
end 

-- update game state
function _update60()
	cls()
	map(0,0,0,0,16,16)
	game_frame = iterate_frames(game_frame)
	player:update()
	for fx in all(player_fx) do
		fx:update()
	end
end

-- draw to screen
function _draw() 
	for fx in all(player_fx) do
		fx:draw()
	end
 	player:draw()
end

-----
-- utility
function iterate_frames(f)
	-- update frame data
	if(f < 59) then
		f += 1
	else
		f = 0
	end

	return f
end

-- buttons
function jump_btnp()
	return (btnp(2) or btnp(4))
end

-- collisions
function check_flag(x, y, f)
	local x1 = x / 8
	local y1 = y / 8
	local x2 = (x + 7) / 8
	local y2 = (y + 7) / 8
	return fget(mget(x1, y1), f) or 
		   fget(mget(x1, y2), f) or 
		   fget(mget(x2, y2), f) or 
		   fget(mget(x2, y1), f)
end

function check_down_spike_flag(x, y, f)
	return fget(mget(x / 8, (y + 2) / 8), f)
end

function check_wall(x, y)
	return check_flag(x, y, 1)
end

function check_spikes(x, y)
	return check_down_spike_flag(x, y, 0)
end

-- fx
function create_jump_fx(sprites, pos_x, pos_y, flip)
	if #sprites > 0 then
		fx_jump = {
			pos_x = pos_x,
			pos_y = pos_y,
			sprites = sprites,
			sprite = sprites[1],
			flip = flip,
			update = function(self)
				if game_frame % 3 == 0 then
					if #self.sprites != 0 then
						self.sprite = self.sprites[1]
						deli(self.sprites, 1)
					else 
						del(player_fx, self)
					end
				end
			end,
			draw = function(self)
				spr(self.sprite, self.pos_x, self.pos_y, 1, 1, self.flip)
			end
		}

		add(player_fx, fx_jump)
	end
end

__gfx__
00000000000000000000000000bb0bb000bb0bb00000000000000000bbbbbbbb33333333000000000000000000000000000000000000000003b00b3003b00b30
0000000000bb0bb00000000003b1bb1b03b1bb1b00bb0bb000000000bbbbbbbb2332323200bb0bb0000000000000000000000000000000000b1bb1b00b1bb1b0
0070070003b1bb1b00bb0bb00bbb82bb0bb8822b0bb1bb1b00bb0bb03b3b3b3b3223242303b1bb1b00bb0bb00000000000000000000000000bbbbbb00b2222b0
000770000bbbbbbb03b1bb1b0bbbbbbb0bbbbbbb0bbb82bb03b1bb1bfbf3fbf3242242420bb1bb1b03b1bb1b0000000000000000000000003b2882b33b2882b3
000770000bb8822b0bbb82bb0bb3b3bb0bb3b3bb0bbbbbbb0bb8822bf3fff3ff424242240bbb82bb0bbb82bb0000000000000000000000000bbbbbb00bbbbbb0
0070070033bbbbbb33bbbbbb03bbbbb303bbbbb30bb3bb3b0bbbbbbbffffffff2444244203bbbbbb03bbbbbb0000000000000000000000000bb33bb00bb33bb0
0000000033bbbbb333bbbbb303bbbbb303bbbbb303bbbbb30bb3bb3bffffffff4224242203bbbbb303bbbbb300000000006000000060000003bbbb3003bbbb30
0000000003b3b3b303b3b3b303000003030000030000000003bbbbb3ffffffff24424224303b3b30303b3b300006000000660000066600000300003003000030
000000000000000000000000000000000000000000000000000000000bb0bb0000bb0bb000000000000000000000000000000000000000000000000066666666
00bb0bb000bb0bb000bb0bb000088000000bb0bb00000000000bb0bb0b1bb1b003b1bb1b00000000000000000000000000000000000000000000000067757576
03b1bb1b03b1bb1b03b1bb1b00888800003b1bb1000bb0bb003bbbbbbbbbbbb00bbbbbbb00000000000000000000000000000000000000000000000067555556
0bbbbbbb0bbb22bb0bbb22bb0888882000bbbbbb003bbbbb00bbbbbbbbb82bb00bbb82bb000000000000000000000000000000000000000000000000655555d6
0bb8822b0bbb82bb0bbb88880288882000bbb82b00bb11b100bb1bb1bbbbbbb033bbbbbb00000000000000000000000000000000000000000000000067555556
33bbbbbb33bb88bb33bb82bb0028820003bbbbbb00bbb82b03bbb82b33bbbbb033bbbbb3000000000000000000000000000000000000000006000060675555d6
33bbbbb333bbbbb333bbbbb30002200033bbbbbb033bbbbb33bbbbbb33b3b3b030b3b3b000000000060000600000000000600600060000606060060665d5ddd6
03b3b3b303b3b3b303b3b3b300000000303b3b303303b3b3303b3b30300000300000000000600600060000606000000600000000000000000600006066666666
00000000000000000000000024224224000000000000000042424224000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000042424242000000000000000020240442000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000022242422000000000000000000400002000000000000000000000000000000000000000000000000000000000000000000000000
00000000090000000080000024224242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000009a900a0008c800c042424224000000000600060000000000000000000000000000000000000000000000000000000000000000000000000000000000
000333000900a9a000800cac24442442005555000600060000000000000000000000000000000000000000000000000000000000000000000000000000000000
0033383003000a00003000c04224242205d66d506dd06dd000000000000000000000000000000000000000000000000000000000000000000000000000000000
03383333033003003333003024424224056666d52222222200000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000002020000000000000000000000000000000000000000000002000000020001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000008080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000823230800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000002626262600210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000001f000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000001f1f252525252508080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0021002623080808080823002300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0008000000210000220023210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0026000000080000080823080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000800260000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000002600002221220024200022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000080808080808080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000262626262626262626000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0004000000000350503505035050350503405033050310502f0502e0502b0502a0502605024050220501e0501a0501605013050100500f0500f0500e0500f0500000000000000000000000000000000000000000
